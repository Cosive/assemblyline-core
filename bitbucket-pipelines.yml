
options:
  max-time: 5

pipelines:
  default:
    - parallel:
      - step:
          name: Build & Test 3.7
          image: python:3.7
          caches: [pip]
          services: &services
            - redis
            - elasticsearch
          script: &build_test
            - apt-get update
            - apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev git
            - mkdir -p /etc/assemblyline/
            - mkdir -p /var/cache/assemblyline/
            - cp test/bitbucket/config.yml /etc/assemblyline
            # Install al common from source
            - git clone git@github.com:CybercentreCanada/assemblyline-base.git ~/assemblyline-base
            - cd ~/assemblyline-base && pwd
            # Try to checkout the matching branch, if the command fails, don't care.
            - git checkout -b $BITBUCKET_BRANCH -t origin/$BITBUCKET_BRANCH || true
            - pip install --no-cache-dir -e .
            - cd - && pwd
            # Install and test al-core
            - pip install --no-cache-dir -r test/requirements.txt
            - pip install --no-cache-dir -e .
            - pytest -rsx -vv
      - step:
          name: Build & Test 3.8
          image: python:3.8
          caches: [pip]
          services: *services
          script: *build_test

  tags:
    v*:
      - step:
          name: Build Package
          image: python:3.8
          caches: [pip]
          script:
            - pip install --no-cache-dir wheel
            - python setup.py bdist_wheel
            - ls dist/
          artifacts:
            - dist/*
      - parallel:
        - step:
            name: Test 3.7
            image: python:3.7
            services: *services
            script: &deploy_test
              - rm -rf assemblyline_core setup.py  # Make sure we are running on the package from the prior build
              - apt-get update
              - apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev
              - pip install --no-cache-dir -f dist assemblyline-core
              - mkdir -p /etc/assemblyline/
              - mkdir -p /var/cache/assemblyline/
              - cp test/bitbucket/config.yml /etc/assemblyline
              - pip install --no-cache-dir -r test/requirements.txt
              - pytest -rsx -vv
        - step:
            name: Test 3.8
            image: python:3.8
            services: *services
            script: *deploy_test
      - step:
          name: Deploy to Test PyPI
          image: python:3.8
          caches: [pip]
          deployment: test
          script:
            - pip install --no-cache-dir twine
            - ls dist
            - twine upload --skip-existing --repository-url $TEST_REPOSITORY_URL dist/*
      - step:
          name: Deploy to PyPI
          image: python:3.8
          caches: [pip]
          deployment: production
          script:
            - pip install --no-cache-dir twine
            - ls dist
            - twine upload --skip-existing dist/*
      - step:
          name: Deploy to Docker Hub
          image: python:3.8
          services: [docker]
          deployment: container
          script:
            - export TAG=${BITBUCKET_TAG#v}
            - until pip install --no-cache-dir assemblyline-core== 2>&1 | grep -q $TAG; do sleep 2; pip install --no-cache-dir assemblyline-core== 2>&1 || true; done
            - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
            - docker build --build-arg version=$TAG -t cccs/assemblyline-core:$TAG -t cccs/assemblyline-core:latest deployment
            - docker push cccs/assemblyline-core
definitions:
  services:
    elasticsearch:
      image: sgaroncse/elasticsearch:7.6.0
      memory: 768
      environment:
        ES_JAVA_OPTS: '-Xms256m -Xmx256m'
        DISCOVERY_TYPE: 'single-node'

    redis:
      image: redis
      memory: 256
